/*
 *
 *  Copyright (C) $<copyright>, Open Connections GmbH
 *  All rights reserved.  See COPYRIGHT file for details.
 *
 *  This software and supporting documentation are maintained by
 *
 *    OFFIS e.V.
 *    R&D Division Health
 *    Escherweg 2
 *    D-26121 Oldenburg, Germany
 *
 *
 *  Module: $<implementation_module>
 *
 *  Author: $<author>
 *
 *  Purpose: Class for managing the $<module.name>
 *
 */

#include "dcmtk/config/osconfig.h"
#include "dcmtk/dcmdata/dcdeftag.h"
#include "dcmtk/dcmdata/dctk.h" // TODO: include only needed VRs
#include "dcmtk/dcmiod/iodutil.h"
#include "$<my_include>"

const OFString $<module.keyword>::m_ModuleName = "$<module.keyword>";


$<module.keyword>::$<module.keyword>()
: IODModule()
{
  resetRules();
}


$<module.keyword>::$<module.keyword>(OFshared_ptr<DcmItem> item,
$whitespace({$<module.keyword>::$<module.keyword>}) OFshared_ptr<IODRules> rules)
: IODModule(item, rules)
{
  // reset element rules
  resetRules();
}


$<module.keyword>::~$<module.keyword>()
{

}


OFString $<module.keyword>::getName() const
{
  return m_ModuleName;
}


void $<module.keyword>::resetRules()
{
  // parameters are tag, VM, type. Overwrite old rules if any.$for( attr : module ) {
  m_Rules->addRule(new IODRule(DCM_$<attr.keyword>, "$<attr.vm>","$<attr.type>", getName(), DcmIODTypes::IE_SERIES), OFTrue);}
}


OFCondition $<module.keyword>::read(DcmItem& source,
            $whitespace(module.keyword)       const OFBool clearOldData)
{
  if (clearOldData)
    clearData();

  IODComponent::read(source, OFFalse /* data already cleared */);$for( attr : module ) if( attr.vr == VR.SQ ) {
  DcmIODUtil::readSubSequence(source, DCM_$<attr.keyword>, m_$<attr.keyword>, m_Rules->getByTag(DCM_$<attr.keyword>));}

  return EC_Normal;
}


OFCondition $<module.keyword>::write(DcmItem& destination)
{
  OFCondition result = EC_Normal;

  result = IODComponent::write(destination);$for( attr : module ) if( attr.vr == VR.SQ ) {$if( attr.vm == VM(1) ) {
  if($<attr.dataType>* p$<attr.keyword> = get$<attr.keyword>())
    DcmIODUtil::writeSingleItem(result, DCM_$<attr.keyword>, *p$<attr.keyword>} $else {
  DcmIODUtil::writeSubSequence<OFVector<$<attr.dataType>> >(result, DCM_$<attr.keyword>, m_$<attr.keyword>}, destination, m_Rules->getByTag(DCM_$<attr.keyword>));}

  return result;
}$for( attr : module ) {


$if( attr.vr == VR.SQ ) {$if( attr.vm == VM(1) ) {$<attr.dataType>* $<module.keyword>::get$<attr.keyword>()
{
  return m_$<attr.keyword>.empty() ? OFnullptr : &*m_$<attr.keyword>.begin();
$}
}
OFVector<$<attr.dataType>>& $<module.keyword>::get$if( attr.vm == VM(1) ){Entire}$<attr.keyword>()
{
  return m_$<attr.keyword>;
$}} $else {OFCondition $<module.keyword>::get$<attr.keyword>($<attr.dataType> &value,
$whitespace({OFCondition $<module.keyword>::get$<attr.keyword>(})const signed long pos) const
{
  return $if( attr.vr.isStringBased )
    {DcmIODUtil::getStringValueFromItem(DCM_$<attr.keyword>, *m_Item}
  $else
    {m_Item->findAndGet$<attr.dataType>(DCM_$<attr.keyword>}, value, pos);
$}}}$for( attr : module ) if( attr.vr != VR.SQ ) {


OFCondition $<module.keyword>::set$<attr.keyword>(const $<attr.dataType> &value,
            $whitespace({$<module.keyword>::set$<attr.keyword>(})const OFBool checkValue)
{
  $if( attr.vr.canCheckVM )
  {OFCondition result = (checkValue) ? $<attr.vr.dcmtkClass>::checkStringValue(value, "$<attr.type>") : EC_Normal;
  if (result.good())
    result =}
$else
  {return} m_Item->putAndInsert$<attr.dataType>$if( attr.vr.isStringBased ){Array}(DCM_$<attr.keyword>, value);$if( attr.vr.canCheckVM ) {
  return result;}
$}}
